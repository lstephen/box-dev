
import org.apache.tools.ant.taskdefs.condition.Os

def userHome = System.properties['user.home']

def buildDir = 'build'
def boxBaseBuildDir = "$buildDir/base"
def boxDevBuildDir = "$buildDir/boxdev"

def distDir = 'dist'

def runningDir = "$userHome/.boxdev/running"

def drives = [
    [ name: 'home', path: "$userHome/.boxdev/home.vmdk" ],
    [ name: 'sync', path: "$userHome/.boxdev/sync.vmdk" ]
]

def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
def isLinux = !isWindows

def vboxpath = System.env.VBOX_INSTALL_PATH ?: ""
def vboxmanage = "${vboxpath}VBoxManage"

def vagrant = isWindows ? 'cmd /c vagrant' : 'sh vagrant'

defaultTasks 'dist'

task clean << {
    delete buildDir
}

task boxBase {
    inputs.file 'src/packer/base.json'
    outputs.dir boxBaseBuildDir

    doLast {
      delete boxBaseBuildDir
      delete "$userHome/VirtualBox VMS/base"

      exec {
          executable vboxmanage
          args 'unregistervm', 'base', '--delete'
          ignoreExitValue = true
      }

      exec {
          executable 'packer'
          args 'build', 'src/packer/base.json'
      }
    }
}

task build(dependsOn: boxBase) {
    inputs.dir file('src/ansible')
    inputs.file file('src/packer/boxdev.json')
    outputs.file file("$boxDevBuildDir/boxdev.box")

    doLast {
      delete boxDevBuildDir
      delete "$userHome/VirtualBox VMS/boxdev-packer"

      exec {
          executable vboxmanage
          args 'unregistervm', 'boxdev-packer', '--delete'
          ignoreExitValue = true
      }

      exec {
          executable 'packer'
          args 'build', 'src/packer/boxdev.json'
      }

      copy {
          from 'boxdev.box'
          into boxDevBuildDir
      }

      delete 'boxdev.box'
    }
}

task dist(dependsOn: build) {
    inputs.files "$boxDevBuildDir/boxdev.box", 'src/vagrant/Vagrantfile'
    outputs.dir distDir

    doLast {
        copy {
            from "$boxDevBuildDir/boxdev.box"
            into distDir
        }

        copy {
            from 'src/vagrant/Vagrantfile'
            into distDir
        }
    }
}

task uninstall << {
    exec {
        commandLine vagrant, 'box', 'remove', 'boxdev'
        ignoreExitValue = true
    }

    exec {
        executable vboxmanage
        args 'unregistervm', 'boxdev-vagrant'
        ignoreExitValue = true
    }
    delete "$userHome/VirtualBox VMS/boxdev-vagrant"
}

task install(dependsOn: [dist, uninstall]) << {
    exec {
      commandLine vagrant, 'box', 'add', 'boxdev', "$distDir/boxdev.box"
    }
}

drives.each() {
    def drive = it
    task "${drive.name}hd" (dependsOn: uninstall) {

        onlyIf {
          !new File(drive.path).exists()
        }

        doLast {
            exec {
                executable vboxmanage
                    args 'createhd', '--filename', drive.path, '--format', 'VMDK', '--size', '40000'
            }
        }
    }
}

task up(dependsOn: [install, homehd, synchd]) << {
    delete runningDir

    copy {
        from distDir
        into runningDir
    }

    exec {
        workingDir runningDir
        commandLine vagrant, 'up'
    }
}

task down << {
    exec {
        workingDir runningDir
        commandLine vagrant, 'halt'
    }
}


task wrapper(type: Wrapper) << {
    gradleVersion = '1.11'
}

